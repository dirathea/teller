"use strict";(self.webpackChunkdocs_tlr_dev=self.webpackChunkdocs_tlr_dev||[]).push([[977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),c=a,k=d["".concat(p,".").concat(c)]||d[c]||m[c]||l;return n?r.createElement(k,o(o({ref:t},u),{},{components:n})):r.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7356:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const l={},o="Configuration Management",i={unversionedId:"features/configuration-management",id:"features/configuration-management",title:"Configuration Management",description:"Detect secrets and value drift",source:"@site/docs/features/configuration-management.md",sourceDirName:"features",slug:"/features/configuration-management",permalink:"/features/configuration-management",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Features",permalink:"/features/"},next:{title:"Customization",permalink:"/features/customization"}},p={},s=[{value:"\ud83e\udeb2 Detect secrets and value drift",id:"-detect-secrets-and-value-drift",level:2},{value:"\ud83e\udeb2 Detect secrets and value drift (graph links between providers)",id:"-detect-secrets-and-value-drift-graph-links-between-providers",level:2},{value:"\ud83d\udcdc Populate templates",id:"-populate-templates",level:2},{value:"\ud83d\udd04 Copy/sync data between providers",id:"-copysync-data-between-providers",level:2},{value:"\ud83d\udeb2 Write and multi-write to providers",id:"-write-and-multi-write-to-providers",level:2},{value:"\u274c Delete and multi-delete from providers",id:"-delete-and-multi-delete-from-providers",level:2},{value:"<code>YAML</code> Export in YAML format",id:"yaml-export-in-yaml-format",level:2},{value:"<code>JSON</code> Export in JSON format",id:"json-export-in-json-format",level:2}],u={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuration-management"},"Configuration Management"),(0,a.kt)("h2",{id:"-detect-secrets-and-value-drift"},"\ud83e\udeb2 Detect secrets and value drift"),(0,a.kt)("p",null,"You can detect ",(0,a.kt)("em",{parentName:"p"},"secret drift")," by comparing values from different providers against each other. It might be that you want to pin a set of keys in different providers to always be the same value; when they aren't -- that means you have a drift."),(0,a.kt)("p",null,"In most cases, keys in providers would be similar which we call ",(0,a.kt)("em",{parentName:"p"},"mirrored")," providers. Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Provider1:\n  MG_PASS=foo***\n\nProvider2:\n  MG_PASS=foo***   # Both keys are called MG_PASS\n")),(0,a.kt)("p",null,"To detected mirror drifts, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"teller mirror-drift"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ teller mirror-drift --source global-dotenv --target my-dotenv\n\nDrifts detected: 2\n\nchanged [] global-dotenv FOO_BAR "n***** != my-dotenv FOO_BAR ne*****\nmissing [] global-dotenv FB 3***** ??\n')),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"mirror-drift --sync ...")," in order to declare that the two providers should represent a completely synchronized mirror (all keys, all values)."),(0,a.kt)("p",null,"As always, the specific provider definitions are in your ",(0,a.kt)("inlineCode",{parentName:"p"},"teller.yml")," file."),(0,a.kt)("h2",{id:"-detect-secrets-and-value-drift-graph-links-between-providers"},"\ud83e\udeb2 Detect secrets and value drift (graph links between providers)"),(0,a.kt)("p",null,"Some times you want to check drift between two providers, and two unrelated keys. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Provider1:\n  MG_PASS=foo***\n\nProvider2:\n  MAILGUN_PASS=foo***\n")),(0,a.kt)("p",null,'This poses a challenge. We need some way to "wire" the keys ',(0,a.kt)("inlineCode",{parentName:"p"},"MG_PASS")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"MAILGUN_PASS")," and declare a relationship of source (",(0,a.kt)("inlineCode",{parentName:"p"},"MG_PASS"),") and destination, or sink (",(0,a.kt)("inlineCode",{parentName:"p"},"MAILGUN_PASS"),")."),(0,a.kt)("p",null,"For this, you can label mappings as ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," and couple with the appropriate sink as ",(0,a.kt)("inlineCode",{parentName:"p"},"sink"),", effectively creating a graph of wirings. We call this ",(0,a.kt)("inlineCode",{parentName:"p"},"graph-drift")," (use same label value for both to wire them together). Then, source values will be compared against sink values in your configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"providers:\n  dotenv:\n    env_sync:\n      path: ~/my-dot-env.env\n      source: s1\n  dotenv2:\n    kind: dotenv\n    env_sync:\n      path: ~/other-dot-env.env\n      sink: s1\n")),(0,a.kt)("p",null,"And run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ teller graph-drift dotenv dotenv2 -c your-config.yml\n")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/83390/117453797-07512380-af4e-11eb-949e-cc875e854fad.png",alt:null})),(0,a.kt)("h2",{id:"-populate-templates"},"\ud83d\udcdc Populate templates"),(0,a.kt)("p",null,"Have a kickstarter project you want to populate quickly with some variables (not secrets though!)?"),(0,a.kt)("p",null,"Have a production project that just ",(0,a.kt)("em",{parentName:"p"},"has")," to have a file to read that contains your variables?"),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"teller")," to inject variables into your own templates (based on ",(0,a.kt)("a",{parentName:"p",href:"https://golang.org/pkg/text/template/"},"go templates"),")."),(0,a.kt)("p",null,"With this template:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'Hello, {{.Teller.EnvByKey "FOO_BAR" "default-value" }}!\n')),(0,a.kt)("p",null,"Run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ teller template my-template.tmpl out.txt\n")),(0,a.kt)("p",null,"Will get you, assuming ",(0,a.kt)("inlineCode",{parentName:"p"},"FOO_BAR=Spock"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Hello, Spock!\n")),(0,a.kt)("h2",{id:"-copysync-data-between-providers"},"\ud83d\udd04 Copy/sync data between providers"),(0,a.kt)("p",null,"In cases where you want to sync between providers, you can do that with ",(0,a.kt)("inlineCode",{parentName:"p"},"teller copy"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Specific mapping key sync")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ teller copy --from dotenv1 --to dotenv2,heroku1\n")),(0,a.kt)("p",null,"This will:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Grab all mapped values from source (",(0,a.kt)("inlineCode",{parentName:"li"},"dotenv1"),")"),(0,a.kt)("li",{parentName:"ol"},"For each target provider, find the matching mapped key, and copy the value from source into it")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Full copy sync")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ teller copy --sync --from dotenv1 --to dotenv2,heroku1\n")),(0,a.kt)("p",null,"This will:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Grab all mapped values from source (",(0,a.kt)("inlineCode",{parentName:"li"},"dotenv1"),")"),(0,a.kt)("li",{parentName:"ol"},"For each target provider, perform a full copy of values from source into the mapped ",(0,a.kt)("inlineCode",{parentName:"li"},"env_sync")," key")),(0,a.kt)("p",null,"Notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The mapping per provider is as configured in your ",(0,a.kt)("inlineCode",{parentName:"li"},"teller.yaml")," file, in the ",(0,a.kt)("inlineCode",{parentName:"li"},"env_sync")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"env")," properties."),(0,a.kt)("li",{parentName:"ul"},"This sync will try to copy ",(0,a.kt)("em",{parentName:"li"},"all")," values from the source.")),(0,a.kt)("h2",{id:"-write-and-multi-write-to-providers"},"\ud83d\udeb2 Write and multi-write to providers"),(0,a.kt)("p",null,"Teller providers supporting ",(0,a.kt)("em",{parentName:"p"},"write")," use cases which allow writing values ",(0,a.kt)("em",{parentName:"p"},"into")," providers."),(0,a.kt)("p",null,"Remember, for this feature it still revolves around definitions in your ",(0,a.kt)("inlineCode",{parentName:"p"},"teller.yml")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ teller put FOO_BAR=$MY_NEW_PASS --providers dotenv -c .teller.write.yml\n")),(0,a.kt)("p",null,"A few notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Values are key-value pair in the format: ",(0,a.kt)("inlineCode",{parentName:"li"},"key=value")," and you can specify multiple pairs at once"),(0,a.kt)("li",{parentName:"ul"},"When you're specifying a literal sensitive value, make sure to use an ENV variable so that nothing sensitive is recorded in your history"),(0,a.kt)("li",{parentName:"ul"},"The flag ",(0,a.kt)("inlineCode",{parentName:"li"},"--providers")," lets you push to one or more providers at once"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FOO_BAR")," must be a mapped key in your configuration for each provider you want to update")),(0,a.kt)("p",null,"Sometimes you don't have a mapped key in your configuration file and want to perform an ad-hoc write, you can do that with ",(0,a.kt)("inlineCode",{parentName:"p"},"--path"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ teller put SMTP_PASS=newpass --path secret/data/foo --providers hashicorp_vault\n")),(0,a.kt)("p",null,"A few notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The pair ",(0,a.kt)("inlineCode",{parentName:"li"},"SMTP_PASS=newpass")," will be pushed to the specified path"),(0,a.kt)("li",{parentName:"ul"},"While you can push to multiple providers, please make sure the ",(0,a.kt)("em",{parentName:"li"},"path semantics")," are the same")),(0,a.kt)("h2",{id:"-delete-and-multi-delete-from-providers"},"\u274c Delete and multi-delete from providers"),(0,a.kt)("p",null,"Teller providers support ",(0,a.kt)("em",{parentName:"p"},"deleting")," values ",(0,a.kt)("em",{parentName:"p"},"from")," providers."),(0,a.kt)("p",null,"This feature revolves around definitions in your ",(0,a.kt)("inlineCode",{parentName:"p"},"teller.yml")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ teller delete FOO_BAR --providers dotenv -c .teller.yml\n")),(0,a.kt)("p",null,"A few notes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can specify multiple keys to delete, for example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ teller delete FOO BAR BAZ --providers dotenv\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The flag ",(0,a.kt)("inlineCode",{parentName:"p"},"--providers")," lets you push to one or more providers at once")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"All keys must be a mapped key in your configuration for each provider you want to delete from"))),(0,a.kt)("p",null,"Sometimes you don't have a mapped key in your configuration file and want to perform an ad-hoc delete. You can do that with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--path")," flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ teller delete FOO BAR --path ~/my-env-file.env --providers dotenv\n")),(0,a.kt)("p",null,"You can also delete all keys at once for a given path, without specifying them one by one:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ teller delete --all-keys --path ~/my-env-file.env --providers dotenv\n")),(0,a.kt)("h2",{id:"yaml-export-in-yaml-format"},(0,a.kt)("inlineCode",{parentName:"h2"},"YAML")," Export in YAML format"),(0,a.kt)("p",null,"You can export in a YAML format, suitable for ",(0,a.kt)("a",{parentName:"p",href:"https://cloud.google.com/functions/docs/env-var"},"GCloud"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ teller yaml\n")),(0,a.kt)("p",null,"Example format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'FOO: "1"\nKEY: VALUE\n')),(0,a.kt)("h2",{id:"json-export-in-json-format"},(0,a.kt)("inlineCode",{parentName:"h2"},"JSON")," Export in JSON format"),(0,a.kt)("p",null,"You can export in a JSON format, suitable for piping through ",(0,a.kt)("inlineCode",{parentName:"p"},"jq")," or other workflows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ teller json\n")),(0,a.kt)("p",null,"Example format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "FOO": "1"\n}\n')))}m.isMDXComponent=!0}}]);