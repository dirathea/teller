"use strict";(self.webpackChunkdocs_tlr_dev=self.webpackChunkdocs_tlr_dev||[]).push([[848],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4},o="Developer Guide",l={unversionedId:"developer-guide/developer-guide",id:"developer-guide/developer-guide",title:"Developer Guide",description:"- Add new provider",source:"@site/docs/developer-guide/developer-guide.md",sourceDirName:"developer-guide",slug:"/developer-guide/",permalink:"/developer-guide/",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Best Practices",permalink:"/best-practices"},next:{title:"How to add a new provider",permalink:"/developer-guide/new-provider"}},p={},s=[{value:"Linting",id:"linting",level:2},{value:"Testing",id:"testing",level:2}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"developer-guide"},"Developer Guide"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/developer-guide/new-provider"},"Add new provider")),(0,i.kt)("li",{parentName:"ul"},"Quick testing as you code: ",(0,i.kt)("inlineCode",{parentName:"li"},"make lint && make test")),(0,i.kt)("li",{parentName:"ul"},"Checking your work before PR, run also integration tests: ",(0,i.kt)("inlineCode",{parentName:"li"},"make integration"))),(0,i.kt)("h2",{id:"linting"},"Linting"),(0,i.kt)("p",null,"Linting is treated as a form of testing (using ",(0,i.kt)("inlineCode",{parentName:"p"},"golangci"),", configuration ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tellerops/teller/blob/master/.golangci.yml"},"here"),"), to run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ make lint\n")),(0,i.kt)("h2",{id:"testing"},"Testing"),(0,i.kt)("p",null,"Testing is composed of ",(0,i.kt)("em",{parentName:"p"},"unit tests")," and ",(0,i.kt)("em",{parentName:"p"},"integration tests"),". Integration tests are based on ",(0,i.kt)("em",{parentName:"p"},"testcontainers")," as well as live sandbox APIs (where containers are not available)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Unit tests are a mix of pure and mocks based tests, abstracting each provider's interface with a custom ",(0,i.kt)("em",{parentName:"li"},"client")),(0,i.kt)("li",{parentName:"ul"},"View ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/tellerops/teller/tree/master/pkg/integration_test"},"integration tests"))),(0,i.kt)("p",null,"To run all unit tests without integration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ make test\n")),(0,i.kt)("p",null,"To run all unit tests including container-based integration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ make integration\n")),(0,i.kt)("p",null,"To run all unit tests including container and live API based integration (this is effectively ",(0,i.kt)("strong",{parentName:"p"},"all integration tests"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ make integration_api\n")),(0,i.kt)("p",null,"Running all tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ make test\n$ make integration_api\n")))}d.isMDXComponent=!0}}]);