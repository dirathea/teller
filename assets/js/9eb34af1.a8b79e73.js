"use strict";(self.webpackChunkdocs_tlr_dev=self.webpackChunkdocs_tlr_dev||[]).push([[609],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2991:(e,t,r)=>{r.d(t,{Z:()=>h});var n=r(7294),a=r(6010),i=r(2802),o=r(9960),s=r(3919),l=r(5999);const c={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function p(e){let{href:t,children:r}=e;return n.createElement(o.Z,{href:t,className:(0,a.Z)("card padding--lg",c.cardContainer)},r)}function d(e){let{href:t,icon:r,title:i,description:o}=e;return n.createElement(p,{href:t},n.createElement("h2",{className:(0,a.Z)("text--truncate",c.cardTitle),title:i},r," ",i),o&&n.createElement("p",{className:(0,a.Z)("text--truncate",c.cardDescription),title:o},o))}function u(e){let{item:t}=e;const r=(0,i.Wl)(t);return r?n.createElement(d,{href:r,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??(0,l.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function m(e){let{item:t}=e;const r=(0,s.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",a=(0,i.xz)(t.docId??void 0);return n.createElement(d,{href:t.href,icon:r,title:t.label,description:t.description??a?.description})}function f(e){let{item:t}=e;switch(t.type){case"link":return n.createElement(m,{item:t});case"category":return n.createElement(u,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function v(e){let{className:t}=e;const r=(0,i.jA)();return n.createElement(h,{items:r.items,className:t})}function h(e){const{items:t,className:r}=e;if(!t)return n.createElement(v,e);const o=(0,i.MN)(t);return n.createElement("section",{className:(0,a.Z)("row",r)},o.map(((e,t)=>n.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},n.createElement(f,{item:e})))))}},2354:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905)),i=r(2991);const o={sidebar_position:3},s="Providers",l={unversionedId:"providers/providers",id:"providers/providers",title:"Providers",description:"For each provider, there are a few points to understand:",source:"@site/docs/providers/providers.md",sourceDirName:"providers",slug:"/providers/",permalink:"/providers/",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/getting-started/configuration"},next:{title:"1Password",permalink:"/providers/1password"}},c={},p=[{value:"General provider configuration",id:"general-provider-configuration",level:2},{value:"Remapping Provider Variables",id:"remapping-provider-variables",level:3}],d={toc:p},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"providers"},"Providers"),(0,a.kt)("p",null,"For each provider, there are a few points to understand:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sync - full sync support. Can we provide a path to a whole environment and have it synced (all keys, all values). Some of the providers support this and some don't."),(0,a.kt)("li",{parentName:"ul"},"Key format - some of the providers expect a path-like key, some env-var like, and some don't care. We'll specify for each.")),(0,a.kt)("h2",{id:"general-provider-configuration"},"General provider configuration"),(0,a.kt)("p",null,"We use the following general structure to specify sync mapping for all providers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# you can use either `env_sync` or `env` or both\nenv_sync:\n  path: ... # path to mapping\n  remap:\n    PROVIDER_VAR1: VAR3 # Maps PROVIDER_VAR1 to local env var VAR3\nenv:\n  VAR1:\n    path: ... # path to value or mapping\n    field: <key> # optional: use if path contains a k/v dict\n    decrypt: true | false # optional: use if provider supports encryption at the value side\n    severity: high | medium | low | none # optional: used for secret scanning, default is high. \'none\' means not a secret\n    redact_with: "**XXX**" # optional: used as a placeholder swapping the secret with it. default is "**REDACTED**"\n  VAR2:\n    path: ...\n')),(0,a.kt)("h3",{id:"remapping-provider-variables"},"Remapping Provider Variables"),(0,a.kt)("p",null,"Providers which support syncing a list of keys and values can be remapped to different environment variable keys. Typically, when teller syncs paths from ",(0,a.kt)("inlineCode",{parentName:"p"},"env_sync"),", the key returned from the provider is directly mapped to the environment variable key. In some cases it might be necessary to have the provider key mapped to a different variable without changing the provider settings. This can be useful when using ",(0,a.kt)("inlineCode",{parentName:"p"},"env_sync")," for ",(0,a.kt)("a",{parentName:"p",href:"https://www.vaultproject.io/docs/secrets/databases"},"Hashicorp Vault Dynamic Database credentials"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"env_sync:\n  path: database/roles/my-role\n  remap:\n    username: PGUSER\n    password: PGPASSWORD\n")),(0,a.kt)("p",null,"Additionally, you can remap key settings by using ",(0,a.kt)("inlineCode",{parentName:"p"},"remap_with")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"remap"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'env_sync:\n  path: database/roles/my-role\n  remap_with: # Use either remap or remap_with, not both.\n    username:\n      field: PGUSER\n      severity: none\n    password:\n      field: PGPASSWORD\n      severity: high\n      redact_with: "**XXX**"\n')),(0,a.kt)("p",null,"After remapping, the local environment variable ",(0,a.kt)("inlineCode",{parentName:"p"},"PGUSER")," will contain the provider value for ",(0,a.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"PGPASSWORD")," will contain the provider value for ",(0,a.kt)("inlineCode",{parentName:"p"},"password"),"."),(0,a.kt)("h1",{id:"list-providers"},"List Providers"),(0,a.kt)(i.Z,{mdxType:"DocCardList"}))}m.isMDXComponent=!0}}]);